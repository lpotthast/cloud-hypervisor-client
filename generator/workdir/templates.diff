diff --git a/workdir/templates_original/hyper/api_mod.mustache b/workdir/templates/hyper/api_mod.mustache
index 67baa44..a9b0971 100644
--- a/workdir/templates_original/hyper/api_mod.mustache
+++ b/workdir/templates/hyper/api_mod.mustache
@@ -6,33 +6,40 @@ use hyper::http;
 use hyper_util::client::legacy::connect::Connect;
 use serde_json;
 
-#[derive(Debug)]
+#[derive(thiserror::Error, Debug)]
 pub enum Error {
+    #[error("ApiError: {0:?}")]
     Api(ApiError),
+    #[error("InvalidHeaderValue: {0}")]
     Header(http::header::InvalidHeaderValue),
+    #[error("Http: {0}")]
     Http(http::Error),
+    #[error("Hyper: {0}")]
     Hyper(hyper::Error),
+    #[error("HyperClient: {0}")]
     HyperClient(hyper_util::client::legacy::Error),
+    #[error("serde_json::Error: {0}")]
     Serde(serde_json::Error),
+    #[error("InvalidUri: {0}")]
     UriError(http::uri::InvalidUri),
 }
 
 pub struct ApiError {
     pub code: hyper::StatusCode,
-    pub body: hyper::body::Incoming,
+    pub body: String,
 }
 
 impl Debug for ApiError {
     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         f.debug_struct("ApiError")
          .field("code", &self.code)
-         .field("body", &"hyper::body::Incoming")
+         .field("body", &self.body)
          .finish()
     }
 }
 
-impl From<(hyper::StatusCode, hyper::body::Incoming)> for Error {
-    fn from(e: (hyper::StatusCode, hyper::body::Incoming)) -> Self {
+impl From<(hyper::StatusCode, String)> for Error {
+    fn from(e: (hyper::StatusCode, String)) -> Self {
         Error::Api(ApiError {
             code: e.0,
             body: e.1,
diff --git a/workdir/templates_original/request.rs b/workdir/templates/request.rs
index a6f7b74..e5733cc 100644
--- a/workdir/templates_original/request.rs
+++ b/workdir/templates/request.rs
@@ -225,7 +225,14 @@ impl Request {
             .and_then(move |response| {
                 let status = response.status();
                 if !status.is_success() {
-                    futures::future::err::<U, Error>(Error::from((status, response.into_body()))).boxed()
+                    Box::pin(async move {
+                        let body_bytes = response.into_body().collect()
+                            .await
+                            .map_err(Error::from)?
+                            .to_bytes();
+                        let body = String::from_utf8_lossy(&body_bytes).to_string();
+                        Err(Error::Api(crate::apis::ApiError { code: status, body }))
+                    })
                 } else if no_return_type {
                     // This is a hack; if there's no_ret_type, U is (), but serde_json gives an
                     // error when deserializing "" into (), so deserialize 'null' into it
